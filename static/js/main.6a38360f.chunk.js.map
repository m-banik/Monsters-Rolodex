{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/searchBox/searchbox-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","_props$monster","monster","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","monsters","map","card_card_component","key","SearchBox","type","value","placeholder","onChange","handleChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","searchField","target","setState","state","_this2","fetch","then","res","json","data","catch","err","console","log","_this3","filterMonsters","filter","toLowerCase","includes","searchbox_component_SearchBox","card_list_card_list_component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAaeA,SAVF,SAAAC,GAAS,IAAAC,EACOD,EAAME,QAA1BC,EADaF,EACbE,KAAMC,EADOH,EACPG,MAAOC,EADAJ,EACAI,GACrB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,0BAAsDO,IAAKT,IACnEG,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCHQS,SAHE,SAAAb,GAAK,OACrBM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaT,EAAMc,SAASC,IAAI,SAAAb,GAAO,OAAII,EAAAC,EAAAC,cAACQ,EAAD,CAAMC,IAAKf,EAAQG,GAAIH,QAASA,SCD9EgB,SAAY,SAAAlB,GAAK,OAC5BM,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVU,KAAK,SACLC,MAAOpB,EAAMoB,MACbC,YAAarB,EAAMqB,YACnBC,SAAUtB,EAAMuB,iBC8BLC,qBAjCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYFL,aAAe,SAAAS,GACb,IAAMC,EAAcD,EAAEE,OAAOd,MAC7BK,EAAKU,SAAS,CAAEF,iBAbhBR,EAAKW,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IAJHR,mFAOM,IAAAY,EAAAT,KAClBU,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIL,EAAKF,SAAS,CAAErB,SAAU4B,MACvCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,UAAWF,sCAMhC,IAAAG,EAAAnB,KACDoB,EAAiBpB,KAAKQ,MAAMtB,SAASmC,OAAO,SAAA/C,GAAO,OAAIA,EAAQC,KAAK+C,cAAcC,SAASJ,EAAKX,MAAMH,YAAYiB,iBACxH,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACEhC,MAAOQ,KAAKQ,MAAMH,YAClBZ,YAAY,uBACZE,aAAcK,KAAKL,eAErBjB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUvC,SAAUkC,YA5BVM,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.6a38360f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card-component.css\";\r\n\r\nconst Card = props => {\r\n const { name, email, id } = props.monster;\r\n return (\r\n  <div className=\"card-container\">\r\n   <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt={name} />\r\n   <h2>{name}</h2>\r\n   <p>{email}</p>\r\n  </div>\r\n );\r\n};\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../card/card-component.jsx\";\r\nimport \"./card-list-component.css\";\r\nconst CardList = props => (\r\n <div className=\"card-list\">{props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}</div>\r\n);\r\nexport default CardList;","import React from \"react\";\r\nimport \"./searchbox-component.css\";\r\n\r\nexport const SearchBox = props => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    value={props.value}\r\n    placeholder={props.placeholder}\r\n    onChange={props.handleChange}\r\n  />\r\n);","import React from 'react';\nimport CardList from \"./components/card-list/card-list-component\";\nimport { SearchBox } from \"./components/searchBox/searchbox-component\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(data => this.setState({ monsters: data }))\n      .catch(err => console.log(\"Error: \", err));\n  }\n  handleChange = e => {\n    const searchField = e.target.value;\n    this.setState({ searchField });\n  };\n  render() {\n    const filterMonsters = this.state.monsters.filter(monster => monster.name.toLowerCase().includes(this.state.searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          value={this.state.searchField}\n          placeholder=\"Search for a monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}